#include "hw3.h"

void HW3::merge(int *array, int l, int m, int r) {
    int i, j, k, nl, nr;
    //размеры правого и левого подмассивов
    пл = т-1+1; количество = РМ;
    int larr[nl], rarr[nr];
    //заполнение подмассивов
    for(i = 0; i<nl; i++)
        larr[i] = массив[l+i];
    for(j = 0; j<nr; j++)
        rarr[j] = массив[m+1+j];
    я = 0; j = 0; к = л;
    //слияние подмассивов
    в то время как (я <nl && j<nr) {
        сф++;
        если (larr[i] <= rarr[j]) {
            мф++;
            массив[k] = larr[i];
            я++;
        }еще{
            мф++;
            массив [k] = рарр [j];
            j++;
        }
        к++;
    }
    в то время как (i<nl) {
        массив[k] = larr[i];
        я++; к++;
    }
    в то время как (j<nr) {
        массив [k] = рарр [j];
        j++; к++;
    }
}
void HW3::mergeSort(int *array, int l, int r) {
    инт м;
    если (l < г) {
        m = l+(rl)/2;
        Сортировка слиянием (массив, л, м);
        сортировка слиянием (массив, m+1, r);
        объединить (массив, л, м, г);
    }
}

недействительным HW3::run() {
    int *arr = новый int[len];
    srand(время(0));
    for (целое i = 0; i<len; i++)
        arr[i] = 1 + rand() % len;

// cout << "Массив перед сортировкой: ";
// отображение (прибытие, длина);

    автозапуск = chrono::system_clock::now();
    mergeSort(обр, 0, длина-1); //(n-1) для последнего индекса
    auto end = chrono::system_clock::now();
    chrono::duration<double, милли> elapsed_seconds = конец - начало;
    cout << "рабочее время: " << elapsed_seconds.count() << "мс" << endl;
    cout << "sf + mf: " << sf + mf << endl;

// cout << "Массив после сортировки: ";
// отображение (прибытие, длина);
}

HW3::HW3(целый размер) {
    длина = размер;
    бежать();
}
